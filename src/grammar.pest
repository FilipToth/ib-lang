module = { block }
block = { (statement)* }

WHITESPACE = _{ " " | "\t" | NEWLINE }
NEWLINE = _{ "\n" | "\n\r" }
letter = _{ ASCII_ALPHA | "_" }
digit = _{ ASCII_DIGIT }

keyword = _{ if_keyword | then_keyword | end_keyword | else_keyword }
    if_keyword = _{ "if" | "IF" }
    then_keyword = _{ "then" | "THEN" }
    end_keyword = _{ "end" | "END" }
    else_keyword = _{ "else" | "ELSE" }
    output_keyword = _{ "output" | "OUTPUT" }
    func_keyword = _{ "function" | "FUNCTION" }
    return_keyword = _{ "return" | "RETURN" }

statement = _{ if_statement | output_statement | return_statement | function_declaration_statement | expression_statement }
    if_statement = { if_keyword ~ expression ~ then_keyword ~ block ~ end_keyword ~ if_keyword }
    output_statement = { output_keyword ~ expression_statement }
    return_statement = { return_keyword ~ expression_statement }
    function_declaration_statement = { func_keyword ~ identifier_token ~ parameter_list ~ (function_type_annotation)? ~ block ~ end_keyword ~ func_keyword  }
    expression_statement = { expression }

identifier_token = @{ !keyword ~ (letter)+ }
number_token = @{ (digit)+ }
boolean_token = @{ "true" | "TRUE" | "false" | "FALSE" }

type_annotation = _{ ":" ~ identifier_token }
parameter = _{ identifier_token ~ type_annotation }
parameter_list = { "(" ~ (parameter ~ ("," ~ parameter)*)? ~ ")" }
argument_list = { "(" ~ (expression ~ ("," ~ expression)*)? ~ ")" }
function_type_annotation = { "->" ~ identifier_token }

binary_operator = _{ addition | subtraction | multiplication | division | equality | not }
    addition = { "+" }
    subtraction = { "-" }
    multiplication = { "*" }
    division = { "/" }
    assignment = { "=" }
    equality = { "==" }

unary_operator = _{ not }
    not = { "not" }

atom_types = _{ assignment_expression | literal_expression | call_expression | reference_expression }
    assignment_expression = { reference_expression ~ assignment ~ expression }
    literal_expression = { number_token | boolean_token }
    call_expression = { identifier_token ~ argument_list }
    reference_expression = { identifier_token }

primary = _{ atom_types | "(" ~ expression ~ ")" }
atom = _{ unary_operator? ~ primary }
expression = { atom ~ (binary_operator ~ atom)* }

