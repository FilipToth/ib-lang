@top Program { Atom* }

@skip { space | LineComment }

Atom {
  IfStatement |
  FunctionDeclaration |
  OutputStatement |
  ReturnStatement |
  VariableAssignment |
  ExpressionStatement
}

IfStatement { IfKeyword Expression* ThenKeyword Block (ElseKeyword Block)? EndKeyword }
FunctionDeclaration { FunctionKeyword Identifier ParameterList Block EndKeyword }
ExpressionStatement { Expression }
OutputStatement { OutputKeyword Expression }
ReturnStatement { ReturnKeyword Expression }

VariableAssignment { Identifier AssignmentOperator Expression }

Block { Atom* }

Parameter { Identifier ":" TypeAnnotation }
ParameterList { "(" (Parameter ("," Parameter)*)? ")" }

Expression {
  CallExpression |
  ReferenceEpxression |
  Boolean |
  String |
  Number |
  MiscOperator |
  TypeAnnotation |
  NotKeyword
}

ReferenceEpxression { Identifier }
CallExpression { Identifier "(" (Atom*)? ")" }

Boolean { @specialize<Identifier, "true" | "false"> }

IfKeyword { @specialize<Identifier, "if" | "IF"> }
ThenKeyword { @specialize<Identifier, "then" | "THEN"> }
EndKeyword { @specialize<Identifier, "end" | "END"> }
ElseKeyword { @specialize<Identifier, "else" | "ELSE"> }
OutputKeyword { @specialize<Identifier, "output" | "OUTPUT"> }
FunctionKeyword { @specialize<Identifier, "function" | "FUNCTION"> }
ReturnKeyword { @specialize<Identifier, "return" | "RETURN"> }
NotKeyword { @specialize<Identifier, "not" | "NOT"> }

TypeAnnotation { @specialize<Identifier,
  "Void" |
  "Int" |
  "String" |
  "Boolean"
>}

@tokens {
  Identifier { ($[a-zA-Z] | "_")+ }

  String { '"' (!["\\] | "\\" _)* '"' }

  Number { $[0-9]+ }

  LineComment { "#" ![\n]* }

  MiscOperator { "+" | "-" | "*" | "/" | "==" }

  AssignmentOperator { "=" }

  space { $[ \t\n\r]+ }

  "(" ")"
}

@detectDelim
