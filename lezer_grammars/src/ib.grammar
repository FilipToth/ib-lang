@top Program { Atom* }

@skip { space | LineComment }

Atom {
  IfStatement
  | FunctionDeclaration
  | OutputStatement
  | ReturnStatement
  | ForStatement
  | WhileStatement
  | VariableAssignment
  | ExpressionStatement
}

IfStatement { IfKeyword Expression* ThenKeyword Block (ElseKeyword Block)? EndKeyword }
FunctionDeclaration { FunctionKeyword Identifier ParameterList Block EndKeyword }
ExpressionStatement { Expression }
OutputStatement { OutputKeyword Expression }
ReturnStatement { ReturnKeyword Expression }
ForStatement { LoopKeyword ForKeyword Identifier FromKeyword Expression ToKeyword Expression Block EndKeyword }
WhileStatement { LoopKeyword WhileKeyword Expression Block EndKeyword }

VariableAssignment { Identifier AssignmentOperator Expression }

Block { Atom* }

Parameter { Identifier ":" TypeAnnotation }
ParameterList { "(" (Parameter ("," Parameter)*)? ")" }

Expression {
  ReferenceEpxression
  | CallExpression
  | ObjectInstantiationExpression
  | Boolean
  | String
  | Number
  | MiscOperator
  | TypeAnnotation
  | NotKeyword
}

ReferenceEpxression { Identifier }
CallExpression { Identifier "(" (Atom*)? ")" }
ObjectInstantiationExpression { NewKeyword TypeAnnotation ("<" TypeAnnotation ">") "(" ")" }

Boolean { @specialize<Identifier, "true" | "false"> }

IfKeyword { @specialize<Identifier, "if" | "IF"> }
ThenKeyword { @specialize<Identifier, "then" | "THEN"> }
EndKeyword { @specialize<Identifier, "end" | "END"> }
ElseKeyword { @specialize<Identifier, "else" | "ELSE"> }
OutputKeyword { @specialize<Identifier, "output" | "OUTPUT"> }
FunctionKeyword { @specialize<Identifier, "function" | "FUNCTION"> }
ReturnKeyword { @specialize<Identifier, "return" | "RETURN"> }
NotKeyword { @specialize<Identifier, "not" | "NOT"> }
LoopKeyword { @specialize<Identifier, "loop" | "LOOP"> }
ForKeyword { @specialize<Identifier, "for" | "FOR"> }
FromKeyword { @specialize<Identifier, "from" | "FROM"> }
ToKeyword { @specialize<Identifier, "to" | "TO"> }
WhileKeyword { @specialize<Identifier, "while" | "WHILE"> }
NewKeyword { @specialize<Identifier, "new" | "NEW"> }

TypeAnnotation { @specialize<Identifier,
  "Void"
  | "Int"
  | "String"
  | "Boolean"
  | "Array"
  | "Collection"
  | "Stack"
  | "Queue"
>}

@tokens {
  Identifier { ($[a-zA-Z] | "_")+ }

  String { '"' (!["\\] | "\\" _)* '"' }

  Number { $[0-9]+ }

  LineComment { "#" ![\n]* }

  MiscOperator { "+" | "-" | "*" | "/" | "==" }

  AssignmentOperator { "=" }

  space { $[ \t\n\r]+ }

  "(" ")"
}

@detectDelim
